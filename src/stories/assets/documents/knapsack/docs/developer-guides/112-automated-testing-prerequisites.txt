
Automated Testing Prerequisites

Intro
 Below is a break down of how Knapsack generates a running catalog of each pattern's variations with every available asset set.
ks-meta.json location
 Knapsack generates a ks-meta.json file at the location specified as dist inknapsack.config.js:
module.exports = configureKnapsack({
   ...
   dist: path/to/knapsack/shared-dist-dir,
   ...
});

The data!
 The ks-meta.json file contains a demoUrls array with each pattern's variations with every available asset set. 
 Each item in the array contains:

patternId — the name of the pattern.
templateId — denotes the renderer used.
demoId — the name given to the variation; by default the first variation added to the system is called "main".
assetSetId — the specific asset set used to render the variation.
url — the url and query string necessary to render the variation* 

 * The url string should be added to the running application's base url and port, like:
 http://localhost:3999/api/v1/render?patternId=button&templateId=angular&assetSetId=default&demoId=main&isInIframe=false&wrapHtml=true
 For example:
{
  "demoUrls": [
    {
      "patternId": "button",
      "templateId": "angular",
      "demoId": "main",
      "assetSetId": "default",
      "url": "/api/v1/render?patternId=button&templateId=angular&assetSetId=default&demoId=main&isInIframe=false&wrapHtml=true"
    },
    {
      "patternId": "button",
      "templateId": "angular",
      "demoId": "06SDjJib-k",
      "assetSetId": "default",
      "url": "/api/v1/render?patternId=button&templateId=angular&assetSetId=default&demoId=06SDjJib-k&isInIframe=false&wrapHtml=true"
    },
    {
      "patternId": "button",
      "templateId": "angular",
      "demoId": "7jMOevUONk",
      "assetSetId": "default",
      "url": "/api/v1/render?patternId=button&templateId=angular&assetSetId=default&demoId=7jMOevUONk&isInIframe=false&wrapHtml=true"
    },
    ...
  ]
}

Next steps and recommendations
 Using the data available in  ks-meta.json we can create helper functions for parsing the catalog:

Import and filter the demoUrls array
Generate your tests using tools such as Cypress, Jest, etc.

Below is the helper function we now include within workspace starter kits:
// Import all Knapsack demo variations (from workspace root dist)
import variations from '../../dist/meta/ks-meta.json';

// Our helper function to filter the specific variation
export const ksDemo = (patternId, templateId, demoId, assetSetId = 'default') => {
  const specificVariation = variations.demoUrls.filter((item) => {
    return (
      item.templateId === templateId &&
      item.demoId === demoId &&
      item.assetSetId === assetSetId &&
      item.patternId === patternId
    );
  });
  return specificVariation[0].url;
};

We can import the above like so:
import { ksDemo } from '../../support/knapsack'; 
Then we're able to use this helper function like:
ksDemo('button', 'react', 'main') 
The above example:

Grabs the 'button' component 
Selecting the 'main' demo
From the 'react' renderer
We can optionally provide a fourth argument to specify the 'theme'


Next up:

Knapsack + Cypress Testing — Knapsack now comes with Cypress E2E tests for components!

